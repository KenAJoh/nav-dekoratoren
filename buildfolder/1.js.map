{"version":3,"file":"1.js","sources":["webpack:///./node_modules/yet-another-fetch-mock/dist/yet-another-fetch-mock.es5.js","webpack:///./node_modules/yet-another-fetch-mock/node_modules/path-to-regexp/index.js"],"sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n  try {\n    // Try to decode the entire string first\n    return decodeURIComponent(components.join(''));\n  } catch (err) {// Do nothing\n  }\n\n  if (components.length === 1) {\n    return components;\n  }\n\n  split = split || 1; // Split the array in 2 parts\n\n  var left = components.slice(0, split);\n  var right = components.slice(split);\n  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input);\n  } catch (err) {\n    var tokens = input.match(singleMatcher);\n\n    for (var i = 1; i < tokens.length; i++) {\n      input = decodeComponents(tokens, i).join('');\n      tokens = input.match(singleMatcher);\n    }\n\n    return input;\n  }\n}\n\nfunction customDecodeURIComponent(input) {\n  // Keep track of all the replacements and prefill the map with the `BOM`\n  var replaceMap = {\n    '%FE%FF': \"\\uFFFD\\uFFFD\",\n    '%FF%FE': \"\\uFFFD\\uFFFD\"\n  };\n  var match = multiMatcher.exec(input);\n\n  while (match) {\n    try {\n      // Decode as big chunks as possible\n      replaceMap[match[0]] = decodeURIComponent(match[0]);\n    } catch (err) {\n      var result = decode(match[0]);\n\n      if (result !== match[0]) {\n        replaceMap[match[0]] = result;\n      }\n    }\n\n    match = multiMatcher.exec(input);\n  } // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\n\n  replaceMap['%C2'] = \"\\uFFFD\";\n  var entries = Object.keys(replaceMap);\n\n  for (var i = 0; i < entries.length; i++) {\n    // Replace all decoded components\n    var key = entries[i];\n    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n  }\n\n  return input;\n}\n\nvar decodeUriComponent = function decodeUriComponent(encodedURI) {\n  if (typeof encodedURI !== 'string') {\n    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n  }\n\n  try {\n    encodedURI = encodedURI.replace(/\\+/g, ' '); // Try the built in decoder first\n\n    return decodeURIComponent(encodedURI);\n  } catch (err) {\n    // Fallback to a more advanced decoder\n    return customDecodeURIComponent(encodedURI);\n  }\n};\n\nfunction parserForArrayFormat(opts) {\n  var result;\n\n  switch (opts.arrayFormat) {\n    case 'index':\n      return function (key, value, accumulator) {\n        result = /\\[(\\d*)\\]$/.exec(key);\n        key = key.replace(/\\[\\d*\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n\n        accumulator[key][result[1]] = value;\n      };\n\n    case 'bracket':\n      return function (key, value, accumulator) {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        } else if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n\n    default:\n      return function (key, value, accumulator) {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n  }\n}\n\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  } else if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort(function (a, b) {\n      return Number(a) - Number(b);\n    }).map(function (key) {\n      return input[key];\n    });\n  }\n\n  return input;\n}\n\nfunction extract(str) {\n  var queryStart = str.indexOf('?');\n\n  if (queryStart === -1) {\n    return '';\n  }\n\n  return str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n  opts = objectAssign({\n    arrayFormat: 'none'\n  }, opts);\n  var formatter = parserForArrayFormat(opts); // Create an object with no prototype\n  // https://github.com/sindresorhus/query-string/issues/47\n\n  var ret = Object.create(null);\n\n  if (typeof str !== 'string') {\n    return ret;\n  }\n\n  str = str.trim().replace(/^[?#&]/, '');\n\n  if (!str) {\n    return ret;\n  }\n\n  str.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('='); // Firefox (pre 40) decodes `%3D` to `=`\n    // https://github.com/sindresorhus/query-string/pull/37\n\n    var key = parts.shift();\n    var val = parts.length > 0 ? parts.join('=') : undefined; // missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\n    val = val === undefined ? null : decodeUriComponent(val);\n    formatter(decodeUriComponent(key), val, ret);\n  });\n  return Object.keys(ret).sort().reduce(function (result, key) {\n    var val = ret[key];\n\n    if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(val);\n    } else {\n      result[key] = val;\n    }\n\n    return result;\n  }, Object.create(null));\n}\n\nvar extract_1 = extract;\nvar parse_1 = parse;\n\nfunction testPromise(data) {\n  return Promise.resolve(data) == data; // tslint:disable-line\n}\n\nfunction execHandler(handler, args) {\n  if (typeof handler === 'function') {\n    var result = handler(args);\n    var isPromise = testPromise(result);\n\n    if (isPromise) {\n      return result;\n    } else {\n      return Promise.resolve({\n        body: result\n      });\n    }\n  } else {\n    return ResponseUtils.jsonPromise(handler);\n  }\n}\n\nfunction unwrap(args) {\n  return function (handler) {\n    if (typeof handler === 'function') {\n      var result = handler(args);\n      var isPromise = testPromise(result);\n\n      if (isPromise) {\n        return result;\n      }\n\n      return Promise.resolve({\n        body: result\n      });\n    } else {\n      return ResponseUtils.jsonPromise(handler);\n    }\n  };\n}\n\nfunction merge(into, data) {\n  return {\n    body: into.body || data.body,\n    status: into.status || data.status,\n    statusText: into.statusText || data.statusText,\n    headers: Object.assign({}, data.headers, into.headers)\n  };\n}\n\nvar ResponseUtils =\n/** @class */\nfunction () {\n  function ResponseUtils() {}\n\n  ResponseUtils.json = function (json) {\n    return function () {\n      return ResponseUtils.jsonPromise(json);\n    };\n  };\n\n  ResponseUtils.jsonPromise = function (json) {\n    var response = {\n      body: JSON.stringify(json)\n    };\n    return Promise.resolve(response);\n  };\n\n  ResponseUtils.delayed = function (delay, handler) {\n    return function (args) {\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          return resolve(execHandler(handler, args));\n        }, delay);\n      });\n    };\n  };\n\n  ResponseUtils.statusCode = function (status) {\n    return function (args) {\n      var response = {\n        status: status\n      };\n      return Promise.resolve(response);\n    };\n  };\n\n  ResponseUtils.statusText = function (statusText) {\n    return function (args) {\n      var response = {\n        statusText: statusText\n      };\n      return Promise.resolve(response);\n    };\n  };\n\n  ResponseUtils.headers = function (headers) {\n    return function (args) {\n      var response = {\n        headers: headers\n      };\n      return Promise.resolve(response);\n    };\n  };\n\n  ResponseUtils.combine = function () {\n    var handlers = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      handlers[_i] = arguments[_i];\n    }\n\n    return function (args) {\n      return Promise.all(handlers.map(unwrap(args))).then(function (data) {\n        return data.reduce(merge, {});\n      });\n    };\n  };\n\n  return ResponseUtils;\n}();\n\nvar pathToRegex = require('path-to-regexp');\n\nfunction findRequestUrl(input, init) {\n  if (typeof input === 'string') {\n    return input;\n  } else {\n    return input.url;\n  }\n}\n\nfunction findRequestMethod(input, init) {\n  if (typeof input === 'string') {\n    return init && init.method || 'GET';\n  } else {\n    return input.method;\n  }\n}\n\nfunction findPathParams(requestUrl, matcherUrl) {\n  if (!matcherUrl) {\n    return {};\n  }\n\n  var urlWithoutQueryParams = requestUrl.split('?')[0];\n  var keys = [];\n  var matcherRegex = pathToRegex(matcherUrl, keys);\n  var match = matcherRegex.exec(urlWithoutQueryParams);\n  var sources = keys.map(function (key, index) {\n    var _a;\n\n    return _a = {}, _a[key.name] = match && match[index + 1], _a;\n  });\n  return Object.assign.apply(Object, [{}].concat(sources));\n}\n\nfunction findQueryParams(input, init) {\n  return parse_1(extract_1(findRequestUrl(input, init)));\n}\n\nfunction findBody(input, init) {\n  if (!init) {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(init.body);\n  } catch (e) {\n    return init.body;\n  }\n}\n\nfunction toMockHandlerFunction(handler) {\n  if (typeof handler === 'function') {\n    return function (args) {\n      return new Promise(function (resolve, reject) {\n        var result = handler(args);\n        var isPromise = testPromise(result);\n\n        if (isPromise) {\n          resolve(result);\n        } else {\n          var response = {\n            body: JSON.stringify(result)\n          };\n          resolve(response);\n        }\n      });\n    };\n  } else {\n    return ResponseUtils.json(handler);\n  }\n}\n\nvar pathToRegex$1 = require('path-to-regexp');\n\nvar heuristics = [/\\?\\w=\\w/, /\\&\\w=\\w/, /\\?\\w$/, /\\&\\w$/];\n\nfunction containsQueryParams(matcherUrl) {\n  if (matcherUrl.includes('?')) {\n    return heuristics.some(function (heuristic) {\n      return heuristic.test(matcherUrl);\n    });\n  }\n\n  return false;\n}\n\nfunction httpMethodHelper(matcherUrl, httpMethod) {\n  if (typeof matcherUrl === 'string') {\n    return MatcherUtils.combine(MatcherUtils.method(httpMethod), MatcherUtils.url(matcherUrl));\n  } else {\n    throw new Error(\"Unknown type of matcherUrl: \" + typeof matcherUrl);\n  }\n}\n\nvar MatcherUtils =\n/** @class */\nfunction () {\n  function MatcherUtils() {}\n\n  MatcherUtils.combine = function () {\n    var matchers = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      matchers[_i] = arguments[_i];\n    }\n\n    return {\n      test: function test(input, init) {\n        return matchers.reduce(function (status, matcher) {\n          return status && matcher.test(input, init);\n        }, Boolean(true));\n      },\n      matcherUrl: matchers.map(function (matcher) {\n        return matcher.matcherUrl;\n      }).find(function (url) {\n        return !!url;\n      })\n    };\n  };\n\n  MatcherUtils.method = function (httpMethod) {\n    return {\n      test: function test(input, init) {\n        return httpMethod === findRequestMethod(input, init).toUpperCase();\n      }\n    };\n  };\n\n  MatcherUtils.url = function (matcherUrl) {\n    if (containsQueryParams(matcherUrl)) {\n      console.warn((\"\\nMatching url '\" + matcherUrl + \"' seems to contain queryparameters.\\nThis is unfortunatly not supported due to a limitation in the matching library.\\n\\nIf the mock-response is dependent on the queryparameter you must use the following;\\n\\nmock.get('/path-without-queryparam', ({ queryParams }) => {\\n  if (queryParams.paramName === 'paramValue') {\\n    return mockDataGivenParam;\\n  }\\n  return mockDataWithoutParam;\\n});\\n      \").trim());\n    }\n\n    return {\n      test: function test(input, init) {\n        if (matcherUrl === '*') {\n          return true;\n        }\n\n        var url = findRequestUrl(input, init);\n        var urlWithoutQueryParams = url.split('?')[0];\n        var keys = [];\n        var matcherRegex = pathToRegex$1(matcherUrl, keys);\n        var match = matcherRegex.exec(urlWithoutQueryParams);\n        return !!match;\n      },\n      matcherUrl: matcherUrl\n    };\n  };\n\n  MatcherUtils.get = function (matcherUrl) {\n    return httpMethodHelper(matcherUrl, 'GET');\n  };\n\n  MatcherUtils.post = function (matcherUrl) {\n    return httpMethodHelper(matcherUrl, 'POST');\n  };\n\n  MatcherUtils.put = function (matcherUrl) {\n    return httpMethodHelper(matcherUrl, 'PUT');\n  };\n\n  MatcherUtils.del = function (matcherUrl) {\n    return httpMethodHelper(matcherUrl, 'DELETE');\n  };\n\n  return MatcherUtils;\n}();\n\nvar defaultFailure = {\n  status: 500,\n  statusText: 'Internal server error'\n};\n\nvar MiddlewareUtils =\n/** @class */\nfunction () {\n  function MiddlewareUtils() {}\n\n  MiddlewareUtils.combine = function () {\n    var middlewares = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      middlewares[_i] = arguments[_i];\n    }\n\n    return function (request, response) {\n      return middlewares.reduce(function (currentResponse, middleware) {\n        return currentResponse.then(function (resp) {\n          return middleware(request, resp);\n        });\n      }, Promise.resolve(response));\n    };\n  };\n\n  MiddlewareUtils.delayMiddleware = function (delayMs) {\n    return function (request, response) {\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          return resolve(response);\n        }, delayMs);\n      });\n    };\n  };\n\n  MiddlewareUtils.failurerateMiddleware = function (probabilityOfFailure, failure) {\n    if (failure === void 0) {\n      failure = defaultFailure;\n    }\n\n    return function (request, response) {\n      return new Promise(function (resolve) {\n        var rnd = Math.random();\n\n        if (rnd < probabilityOfFailure) {\n          resolve(failure);\n        } else {\n          resolve(response);\n        }\n      });\n    };\n  };\n\n  MiddlewareUtils.loggingMiddleware = function () {\n    return function (request, response) {\n      // tslint:disable\n      console.groupCollapsed(request.method + \" \" + request.url);\n      console.groupCollapsed('config');\n      console.log('queryParams', request.queryParams);\n      console.log('pathParams', request.pathParams);\n      console.log('body', request.body);\n\n      if (request.init) {\n        console.log('header', request.init.headers);\n      }\n\n      console.groupEnd();\n\n      try {\n        console.log('response', JSON.parse(response.body));\n      } catch (e) {\n        console.log('response', response);\n      }\n\n      console.groupEnd(); // tslint:enable\n\n      return response;\n    };\n  };\n\n  return MiddlewareUtils;\n}();\n\nvar allMatcher = {\n  test: function test(input, init) {\n    return true;\n  }\n};\n\nvar SpyMiddleware =\n/** @class */\nfunction () {\n  function SpyMiddleware() {\n    this.middleware = this.middleware.bind(this);\n    this.entries = [];\n  }\n\n  SpyMiddleware.prototype.middleware = function (request, response) {\n    var entry = {\n      request: request,\n      response: response\n    };\n    this.entries.unshift(entry);\n    return response;\n  };\n\n  SpyMiddleware.prototype.reset = function () {\n    this.entries = [];\n  };\n\n  SpyMiddleware.prototype.calls = function (matcher) {\n    if (matcher === void 0) {\n      matcher = allMatcher;\n    }\n\n    return this.entries.filter(function (entry) {\n      return matcher.test(entry.request.input, entry.request.init);\n    });\n  };\n\n  SpyMiddleware.prototype.lastCall = function (matcher) {\n    if (matcher === void 0) {\n      matcher = allMatcher;\n    }\n\n    return this.entries.find(function (entry) {\n      return matcher.test(entry.request.input, entry.request.init);\n    });\n  };\n\n  SpyMiddleware.prototype.called = function (matcher) {\n    if (matcher === void 0) {\n      matcher = allMatcher;\n    }\n\n    return this.lastCall(matcher) !== undefined;\n  };\n\n  SpyMiddleware.prototype.lastUrl = function (matcher) {\n    if (matcher === void 0) {\n      matcher = allMatcher;\n    }\n\n    var lastCalled = this.lastCall(matcher);\n    return lastCalled ? lastCalled.request.input : undefined;\n  };\n\n  SpyMiddleware.prototype.lastOptions = function (matcher) {\n    if (matcher === void 0) {\n      matcher = allMatcher;\n    }\n\n    var lastCalled = this.lastCall(matcher);\n    return lastCalled ? lastCalled.request.init : undefined;\n  };\n\n  SpyMiddleware.prototype.size = function () {\n    return this.entries.length;\n  };\n\n  return SpyMiddleware;\n}();\n\nvar defaultConfiguration = {\n  enableFallback: true,\n  ignoreMiddlewareIfFallback: false,\n  middleware: function middleware(request, response) {\n    return response;\n  }\n};\n\nvar FetchMock =\n/** @class */\nfunction () {\n  function FetchMock(scope, configuration) {\n    this.scope = scope;\n    this.configuration = Object.assign({}, defaultConfiguration, configuration);\n    this.realFetch = scope.fetch;\n    this.routes = [];\n    this.scope.fetch = this.fetchproxy.bind(this);\n  }\n\n  FetchMock.configure = function (configuration) {\n    if (configuration === void 0) {\n      configuration = defaultConfiguration;\n    }\n\n    return new FetchMock(window, configuration);\n  };\n\n  FetchMock.prototype.restore = function () {\n    this.scope.fetch = this.realFetch;\n  };\n\n  FetchMock.prototype.get = function (url, handler) {\n    this.mock(MatcherUtils.get(url), handler);\n  };\n\n  FetchMock.prototype.post = function (url, handler) {\n    this.mock(MatcherUtils.post(url), handler);\n  };\n\n  FetchMock.prototype.delete = function (url, handler) {\n    this.mock(MatcherUtils.del(url), handler);\n  };\n\n  FetchMock.prototype.put = function (url, handler) {\n    this.mock(MatcherUtils.put(url), handler);\n  };\n\n  FetchMock.prototype.mock = function (matcher, handler) {\n    this.routes.push({\n      matcher: matcher,\n      handler: toMockHandlerFunction(handler)\n    });\n  };\n\n  FetchMock.prototype.reset = function () {\n    this.routes = [];\n  };\n\n  FetchMock.prototype.fetchproxy = function (input, init) {\n    var _this = this;\n\n    var matchingRoute = this.findMatchingRoute(input, init);\n    var url = findRequestUrl(input, init);\n    var method = findRequestMethod(input, init);\n    var queryParams = findQueryParams(url);\n    var body = findBody(input, init);\n    var pathParams = {};\n    var response;\n\n    if (typeof matchingRoute === 'undefined') {\n      if (this.configuration.enableFallback) {\n        console.warn(\"Did not find any matching route for: \" + method.toUpperCase() + \" \" + url + \". Defaulting to the real fetch-implementation.\");\n        response = this.realFetch.call(this.scope, input, init);\n\n        if (this.configuration.ignoreMiddlewareIfFallback) {\n          return response;\n        }\n      } else {\n        throw new Error(\"Did not find any matching route for: \" + method.toUpperCase() + \" \" + url + \".\");\n      }\n    } else {\n      pathParams = findPathParams(url, matchingRoute.matcher.matcherUrl);\n      response = matchingRoute.handler({\n        input: input,\n        init: init,\n        url: url,\n        method: method,\n        pathParams: pathParams,\n        queryParams: queryParams,\n        body: body\n      });\n    }\n\n    return response.then(function (resp) {\n      return _this.configuration.middleware({\n        input: input,\n        init: init,\n        url: url,\n        method: method,\n        queryParams: queryParams,\n        pathParams: pathParams,\n        body: body\n      }, resp);\n    }).then(function (_a) {\n      var body = _a.body,\n          _b = _a.status,\n          status = _b === void 0 ? 200 : _b,\n          _c = _a.statusText,\n          statusText = _c === void 0 ? 'OK' : _c,\n          _d = _a.headers,\n          headers = _d === void 0 ? {} : _d;\n      return new Response(body, {\n        status: status,\n        statusText: statusText,\n        headers: headers\n      });\n    });\n  };\n\n  FetchMock.prototype.findMatchingRoute = function (input, init) {\n    return this.routes.find(function (route) {\n      return route.matcher.test(input, init);\n    });\n  };\n\n  return FetchMock;\n}();\n\nexport default FetchMock;\nexport { MatcherUtils, ResponseUtils, MiddlewareUtils, SpyMiddleware };","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp;\nmodule.exports.parse = parse;\nmodule.exports.compile = compile;\nmodule.exports.tokensToFunction = tokensToFunction;\nmodule.exports.tokensToRegExp = tokensToRegExp;\n/**\n * Default configs.\n */\n\nvar DEFAULT_DELIMITER = '/';\nvar DEFAULT_DELIMITERS = './';\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\n\nvar PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)', // Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n// \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n'(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'].join('|'), 'g');\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\n\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || DEFAULT_DELIMITER;\n  var delimiters = options && options.delimiters || DEFAULT_DELIMITERS;\n  var pathEscaped = false;\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length; // Ignore already escaped sequences.\n\n    if (escaped) {\n      path += escaped[1];\n      pathEscaped = true;\n      continue;\n    }\n\n    var prev = '';\n    var next = str[index];\n    var name = res[2];\n    var capture = res[3];\n    var group = res[4];\n    var modifier = res[5];\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1;\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k];\n        path = path.slice(0, k);\n      }\n    } // Push the current path onto the tokens.\n\n\n    if (path) {\n      tokens.push(path);\n      path = '';\n      pathEscaped = false;\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = prev || defaultDelimiter;\n    var pattern = capture || group;\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    });\n  } // Push any remaining characters.\n\n\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index));\n  }\n\n  return tokens;\n}\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\n\n\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options));\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\n\n\nfunction tokensToFunction(tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length); // Compile all the patterns before compilation.\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (data, options) {\n    var path = '';\n    var encode = options && options.encode || encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n\n      var value = data ? data[token.name] : undefined;\n      var segment;\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array');\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue;\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"');\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue;\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token);\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n        }\n\n        path += token.prefix + segment;\n        continue;\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix;\n        continue;\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'));\n    }\n\n    return path;\n  };\n}\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\n\n\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\n\n\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1');\n}\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\n\n\nfunction flags(options) {\n  return options && options.sensitive ? '' : 'i';\n}\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\n\n\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path; // Use a negative lookahead to match only capturing groups.\n\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      });\n    }\n  }\n\n  return path;\n}\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\n\n\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options));\n}\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\n\n\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\n\n\nfunction tokensToRegExp(tokens, keys, options) {\n  options = options || {};\n  var strict = options.strict;\n  var start = options.start !== false;\n  var end = options.end !== false;\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS;\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');\n  var route = start ? '^' : '';\n  var isEndDelimited = tokens.length === 0; // Iterate over the tokens and create our regexp string.\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;\n    } else {\n      var capture = token.repeat ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*' : token.pattern;\n      if (keys) keys.push(token);\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?';\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')';\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?';\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';\n  }\n\n  return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\n\n\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys);\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(\n    /** @type {!Array} */\n    path, keys, options);\n  }\n\n  return stringToRegexp(\n  /** @type {string} */\n  path, keys, options);\n}"],"mappingsrsourceRoot":""}